# Generated from BisonLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


if "." in __name__:
    from .BisonLexerBase import BisonLexerBase
else:
    from BisonLexerBase import BisonLexerBase

def serializedATN():
    return [
        4,0,73,851,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,
        2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,
        2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,
        7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
        2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,
        7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,
        2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,
        7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
        2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
        7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,
        2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,
        7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,
        2,76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,
        7,82,2,83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,
        2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,
        7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,
        101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,2,106,7,106,
        1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,230,8,1,10,1,12,1,233,9,
        1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,280,8,
        2,10,2,12,2,283,9,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,293,8,2,
        10,2,12,2,296,9,2,1,2,1,2,1,2,1,2,3,2,302,8,2,1,3,1,3,1,3,3,3,307,
        8,3,1,4,1,4,3,4,311,8,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,
        1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,4,10,331,8,10,11,10,12,10,332,1,
        10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,3,12,343,8,12,1,13,1,13,1,
        14,1,14,1,15,1,15,1,15,1,15,5,15,353,8,15,10,15,12,15,356,9,15,1,
        15,1,15,1,15,3,15,361,8,15,1,16,1,16,1,16,1,16,1,16,5,16,368,8,16,
        10,16,12,16,371,9,16,1,16,1,16,1,16,3,16,376,8,16,1,16,1,16,1,16,
        1,16,1,16,5,16,383,8,16,10,16,12,16,386,9,16,3,16,388,8,16,1,17,
        1,17,1,17,1,17,1,17,5,17,395,8,17,10,17,12,17,398,9,17,1,18,1,18,
        1,18,1,18,5,18,404,8,18,10,18,12,18,407,9,18,1,19,1,19,1,19,1,19,
        1,19,3,19,414,8,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,3,21,
        424,8,21,3,21,426,8,21,3,21,428,8,21,3,21,430,8,21,1,22,1,22,1,22,
        5,22,435,8,22,10,22,12,22,438,9,22,3,22,440,8,22,1,23,1,23,1,24,
        1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,455,8,25,
        1,26,1,26,1,26,3,26,460,8,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,
        1,28,5,28,470,8,28,10,28,12,28,473,9,28,1,28,1,28,1,29,1,29,1,29,
        5,29,480,8,29,10,29,12,29,483,9,29,1,29,1,29,1,30,1,30,1,30,5,30,
        490,8,30,10,30,12,30,493,9,30,1,31,1,31,1,31,5,31,498,8,31,10,31,
        12,31,501,9,31,1,32,1,32,3,32,505,8,32,1,33,1,33,1,34,1,34,3,34,
        511,8,34,1,35,1,35,5,35,515,8,35,10,35,12,35,518,9,35,1,36,1,36,
        5,36,522,8,36,10,36,12,36,525,9,36,1,37,1,37,1,37,1,37,1,38,1,38,
        1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,41,
        1,41,1,42,1,42,3,42,549,8,42,1,43,1,43,3,43,553,8,43,1,44,1,44,1,
        44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,
        47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,
        49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
        51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,
        52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,
        56,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,60,1,60,1,60,1,
        60,5,60,636,8,60,10,60,12,60,639,9,60,1,60,1,60,1,61,4,61,644,8,
        61,11,61,12,61,645,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,63,1,63,
        1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,66,
        1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,
        1,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,
        1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,
        1,75,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,
        1,77,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,80,1,80,
        1,80,1,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,83,1,83,1,83,
        1,83,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,
        1,86,1,86,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,89,1,89,
        1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,92,
        1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,95,1,95,
        1,95,1,95,1,96,1,96,1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,98,
        1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,
        1,100,1,101,1,101,1,101,1,101,1,101,1,102,1,102,1,102,1,102,1,103,
        1,103,1,103,1,103,1,104,1,104,1,104,1,104,1,104,1,105,1,105,1,105,
        1,105,1,106,1,106,1,106,1,106,4,231,354,369,637,0,107,6,1,8,2,10,
        3,12,4,14,5,16,6,18,7,20,8,22,9,24,10,26,11,28,12,30,0,32,0,34,0,
        36,0,38,0,40,0,42,0,44,0,46,0,48,0,50,0,52,0,54,0,56,0,58,0,60,0,
        62,0,64,0,66,0,68,0,70,0,72,0,74,0,76,0,78,0,80,0,82,0,84,0,86,0,
        88,13,90,14,92,15,94,16,96,17,98,18,100,19,102,20,104,21,106,22,
        108,23,110,24,112,25,114,26,116,27,118,28,120,29,122,30,124,31,126,
        32,128,33,130,0,132,34,134,35,136,36,138,37,140,38,142,39,144,40,
        146,41,148,42,150,43,152,44,154,0,156,45,158,46,160,47,162,48,164,
        49,166,50,168,51,170,52,172,53,174,54,176,0,178,55,180,56,182,57,
        184,58,186,59,188,60,190,61,192,62,194,63,196,64,198,0,200,65,202,
        66,204,67,206,68,208,69,210,70,212,71,214,0,216,72,218,73,6,0,1,
        2,3,4,5,12,2,0,10,10,12,13,2,0,9,9,32,32,2,0,10,10,13,13,8,0,34,
        34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,1,0,49,57,3,
        0,48,57,65,70,97,102,1,0,48,57,4,0,10,10,13,13,39,39,92,92,4,0,10,
        10,13,13,34,34,92,92,5,0,48,57,95,95,183,183,768,879,8255,8256,13,
        0,65,90,97,122,192,214,216,246,248,767,880,893,895,8191,8204,8205,
        8304,8591,11264,12271,12289,55295,63744,64975,65008,65533,6,0,45,
        45,48,57,95,95,183,183,768,879,8255,8256,869,0,6,1,0,0,0,0,8,1,0,
        0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,0,18,1,0,
        0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,0,0,28,1,0,
        0,0,1,80,1,0,0,0,1,82,1,0,0,0,1,84,1,0,0,0,1,86,1,0,0,0,1,88,1,0,
        0,0,1,90,1,0,0,0,1,92,1,0,0,0,1,94,1,0,0,0,1,96,1,0,0,0,1,98,1,0,
        0,0,1,100,1,0,0,0,1,102,1,0,0,0,1,104,1,0,0,0,1,106,1,0,0,0,1,108,
        1,0,0,0,1,110,1,0,0,0,1,112,1,0,0,0,1,114,1,0,0,0,1,116,1,0,0,0,
        1,118,1,0,0,0,1,120,1,0,0,0,1,122,1,0,0,0,1,124,1,0,0,0,1,126,1,
        0,0,0,1,128,1,0,0,0,1,130,1,0,0,0,2,132,1,0,0,0,2,134,1,0,0,0,2,
        136,1,0,0,0,2,138,1,0,0,0,2,140,1,0,0,0,2,142,1,0,0,0,2,144,1,0,
        0,0,2,146,1,0,0,0,2,148,1,0,0,0,2,150,1,0,0,0,2,152,1,0,0,0,3,154,
        1,0,0,0,3,156,1,0,0,0,3,158,1,0,0,0,3,160,1,0,0,0,3,162,1,0,0,0,
        3,164,1,0,0,0,3,166,1,0,0,0,3,168,1,0,0,0,3,170,1,0,0,0,3,172,1,
        0,0,0,3,174,1,0,0,0,4,176,1,0,0,0,4,178,1,0,0,0,4,180,1,0,0,0,4,
        182,1,0,0,0,4,184,1,0,0,0,4,186,1,0,0,0,4,188,1,0,0,0,4,190,1,0,
        0,0,4,192,1,0,0,0,4,194,1,0,0,0,4,196,1,0,0,0,5,198,1,0,0,0,5,200,
        1,0,0,0,5,202,1,0,0,0,5,204,1,0,0,0,5,206,1,0,0,0,5,208,1,0,0,0,
        5,210,1,0,0,0,5,212,1,0,0,0,5,214,1,0,0,0,5,216,1,0,0,0,5,218,1,
        0,0,0,6,220,1,0,0,0,8,225,1,0,0,0,10,301,1,0,0,0,12,306,1,0,0,0,
        14,310,1,0,0,0,16,312,1,0,0,0,18,317,1,0,0,0,20,319,1,0,0,0,22,321,
        1,0,0,0,24,325,1,0,0,0,26,330,1,0,0,0,28,336,1,0,0,0,30,342,1,0,
        0,0,32,344,1,0,0,0,34,346,1,0,0,0,36,348,1,0,0,0,38,387,1,0,0,0,
        40,389,1,0,0,0,42,399,1,0,0,0,44,408,1,0,0,0,46,415,1,0,0,0,48,418,
        1,0,0,0,50,439,1,0,0,0,52,441,1,0,0,0,54,443,1,0,0,0,56,454,1,0,
        0,0,58,456,1,0,0,0,60,463,1,0,0,0,62,466,1,0,0,0,64,476,1,0,0,0,
        66,486,1,0,0,0,68,494,1,0,0,0,70,504,1,0,0,0,72,506,1,0,0,0,74,510,
        1,0,0,0,76,512,1,0,0,0,78,519,1,0,0,0,80,526,1,0,0,0,82,530,1,0,
        0,0,84,534,1,0,0,0,86,539,1,0,0,0,88,544,1,0,0,0,90,548,1,0,0,0,
        92,552,1,0,0,0,94,554,1,0,0,0,96,558,1,0,0,0,98,564,1,0,0,0,100,
        568,1,0,0,0,102,575,1,0,0,0,104,581,1,0,0,0,106,588,1,0,0,0,108,
        595,1,0,0,0,110,603,1,0,0,0,112,614,1,0,0,0,114,616,1,0,0,0,116,
        618,1,0,0,0,118,620,1,0,0,0,120,622,1,0,0,0,122,624,1,0,0,0,124,
        629,1,0,0,0,126,631,1,0,0,0,128,643,1,0,0,0,130,649,1,0,0,0,132,
        654,1,0,0,0,134,659,1,0,0,0,136,664,1,0,0,0,138,668,1,0,0,0,140,
        673,1,0,0,0,142,678,1,0,0,0,144,683,1,0,0,0,146,687,1,0,0,0,148,
        691,1,0,0,0,150,695,1,0,0,0,152,699,1,0,0,0,154,703,1,0,0,0,156,
        708,1,0,0,0,158,713,1,0,0,0,160,717,1,0,0,0,162,722,1,0,0,0,164,
        727,1,0,0,0,166,732,1,0,0,0,168,736,1,0,0,0,170,740,1,0,0,0,172,
        744,1,0,0,0,174,748,1,0,0,0,176,752,1,0,0,0,178,757,1,0,0,0,180,
        762,1,0,0,0,182,766,1,0,0,0,184,771,1,0,0,0,186,776,1,0,0,0,188,
        781,1,0,0,0,190,785,1,0,0,0,192,789,1,0,0,0,194,793,1,0,0,0,196,
        797,1,0,0,0,198,801,1,0,0,0,200,806,1,0,0,0,202,811,1,0,0,0,204,
        815,1,0,0,0,206,820,1,0,0,0,208,825,1,0,0,0,210,830,1,0,0,0,212,
        834,1,0,0,0,214,838,1,0,0,0,216,843,1,0,0,0,218,847,1,0,0,0,220,
        221,5,37,0,0,221,222,5,37,0,0,222,223,1,0,0,0,223,224,6,0,0,0,224,
        7,1,0,0,0,225,226,5,37,0,0,226,227,5,123,0,0,227,231,1,0,0,0,228,
        230,9,0,0,0,229,228,1,0,0,0,230,233,1,0,0,0,231,232,1,0,0,0,231,
        229,1,0,0,0,232,234,1,0,0,0,233,231,1,0,0,0,234,235,5,37,0,0,235,
        236,5,125,0,0,236,9,1,0,0,0,237,238,5,37,0,0,238,239,5,108,0,0,239,
        240,5,101,0,0,240,241,5,102,0,0,241,302,5,116,0,0,242,243,5,37,0,
        0,243,244,5,114,0,0,244,245,5,105,0,0,245,246,5,103,0,0,246,247,
        5,104,0,0,247,302,5,116,0,0,248,249,5,37,0,0,249,250,5,110,0,0,250,
        251,5,111,0,0,251,252,5,110,0,0,252,253,5,97,0,0,253,254,5,115,0,
        0,254,255,5,115,0,0,255,256,5,111,0,0,256,302,5,99,0,0,257,258,5,
        37,0,0,258,259,5,112,0,0,259,260,5,114,0,0,260,261,5,101,0,0,261,
        262,5,99,0,0,262,263,5,101,0,0,263,264,5,100,0,0,264,265,5,101,0,
        0,265,266,5,110,0,0,266,267,5,99,0,0,267,302,5,101,0,0,268,269,5,
        37,0,0,269,270,5,116,0,0,270,271,5,111,0,0,271,272,5,107,0,0,272,
        273,5,101,0,0,273,302,5,110,0,0,274,275,5,47,0,0,275,276,5,47,0,
        0,276,277,5,64,0,0,277,281,1,0,0,0,278,280,3,32,13,0,279,278,1,0,
        0,0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,284,1,0,
        0,0,283,281,1,0,0,0,284,285,5,37,0,0,285,286,5,116,0,0,286,287,5,
        111,0,0,287,288,5,107,0,0,288,289,5,101,0,0,289,290,5,110,0,0,290,
        294,1,0,0,0,291,293,8,0,0,0,292,291,1,0,0,0,293,296,1,0,0,0,294,
        292,1,0,0,0,294,295,1,0,0,0,295,302,1,0,0,0,296,294,1,0,0,0,297,
        298,5,37,0,0,298,299,5,101,0,0,299,300,5,112,0,0,300,302,5,112,0,
        0,301,237,1,0,0,0,301,242,1,0,0,0,301,248,1,0,0,0,301,257,1,0,0,
        0,301,268,1,0,0,0,301,274,1,0,0,0,301,297,1,0,0,0,302,11,1,0,0,0,
        303,307,3,76,35,0,304,307,3,62,28,0,305,307,3,64,29,0,306,303,1,
        0,0,0,306,304,1,0,0,0,306,305,1,0,0,0,307,13,1,0,0,0,308,311,3,66,
        30,0,309,311,3,68,31,0,310,308,1,0,0,0,310,309,1,0,0,0,311,15,1,
        0,0,0,312,313,5,37,0,0,313,314,3,78,36,0,314,315,1,0,0,0,315,316,
        6,5,1,0,316,17,1,0,0,0,317,318,3,38,16,0,318,19,1,0,0,0,319,320,
        3,40,17,0,320,21,1,0,0,0,321,322,3,36,15,0,322,323,1,0,0,0,323,324,
        6,8,2,0,324,23,1,0,0,0,325,326,3,42,18,0,326,327,1,0,0,0,327,328,
        6,9,2,0,328,25,1,0,0,0,329,331,3,30,12,0,330,329,1,0,0,0,331,332,
        1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,334,1,0,0,0,334,335,
        6,10,3,0,335,27,1,0,0,0,336,337,9,0,0,0,337,338,1,0,0,0,338,339,
        6,11,2,0,339,29,1,0,0,0,340,343,3,32,13,0,341,343,3,34,14,0,342,
        340,1,0,0,0,342,341,1,0,0,0,343,31,1,0,0,0,344,345,7,1,0,0,345,33,
        1,0,0,0,346,347,7,0,0,0,347,35,1,0,0,0,348,349,5,47,0,0,349,350,
        5,42,0,0,350,354,1,0,0,0,351,353,9,0,0,0,352,351,1,0,0,0,353,356,
        1,0,0,0,354,355,1,0,0,0,354,352,1,0,0,0,355,360,1,0,0,0,356,354,
        1,0,0,0,357,358,5,42,0,0,358,361,5,47,0,0,359,361,5,0,0,1,360,357,
        1,0,0,0,360,359,1,0,0,0,361,37,1,0,0,0,362,363,5,47,0,0,363,364,
        5,42,0,0,364,365,5,42,0,0,365,369,1,0,0,0,366,368,9,0,0,0,367,366,
        1,0,0,0,368,371,1,0,0,0,369,370,1,0,0,0,369,367,1,0,0,0,370,375,
        1,0,0,0,371,369,1,0,0,0,372,373,5,42,0,0,373,376,5,47,0,0,374,376,
        5,0,0,1,375,372,1,0,0,0,375,374,1,0,0,0,376,388,1,0,0,0,377,378,
        5,47,0,0,378,379,5,47,0,0,379,380,5,64,0,0,380,384,1,0,0,0,381,383,
        8,2,0,0,382,381,1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,384,385,
        1,0,0,0,385,388,1,0,0,0,386,384,1,0,0,0,387,362,1,0,0,0,387,377,
        1,0,0,0,388,39,1,0,0,0,389,390,5,47,0,0,390,391,5,47,0,0,391,392,
        5,47,0,0,392,396,1,0,0,0,393,395,8,2,0,0,394,393,1,0,0,0,395,398,
        1,0,0,0,396,394,1,0,0,0,396,397,1,0,0,0,397,41,1,0,0,0,398,396,1,
        0,0,0,399,400,5,47,0,0,400,401,5,47,0,0,401,405,1,0,0,0,402,404,
        8,2,0,0,403,402,1,0,0,0,404,407,1,0,0,0,405,403,1,0,0,0,405,406,
        1,0,0,0,406,43,1,0,0,0,407,405,1,0,0,0,408,413,5,92,0,0,409,414,
        7,3,0,0,410,414,3,48,21,0,411,414,9,0,0,0,412,414,5,0,0,1,413,409,
        1,0,0,0,413,410,1,0,0,0,413,411,1,0,0,0,413,412,1,0,0,0,414,45,1,
        0,0,0,415,416,5,92,0,0,416,417,9,0,0,0,417,47,1,0,0,0,418,429,5,
        117,0,0,419,427,3,52,23,0,420,425,3,52,23,0,421,423,3,52,23,0,422,
        424,3,52,23,0,423,422,1,0,0,0,423,424,1,0,0,0,424,426,1,0,0,0,425,
        421,1,0,0,0,425,426,1,0,0,0,426,428,1,0,0,0,427,420,1,0,0,0,427,
        428,1,0,0,0,428,430,1,0,0,0,429,419,1,0,0,0,429,430,1,0,0,0,430,
        49,1,0,0,0,431,440,5,48,0,0,432,436,7,4,0,0,433,435,3,54,24,0,434,
        433,1,0,0,0,435,438,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,
        440,1,0,0,0,438,436,1,0,0,0,439,431,1,0,0,0,439,432,1,0,0,0,440,
        51,1,0,0,0,441,442,7,5,0,0,442,53,1,0,0,0,443,444,7,6,0,0,444,55,
        1,0,0,0,445,446,5,116,0,0,446,447,5,114,0,0,447,448,5,117,0,0,448,
        455,5,101,0,0,449,450,5,102,0,0,450,451,5,97,0,0,451,452,5,108,0,
        0,452,453,5,115,0,0,453,455,5,101,0,0,454,445,1,0,0,0,454,449,1,
        0,0,0,455,57,1,0,0,0,456,459,5,39,0,0,457,460,3,44,19,0,458,460,
        8,7,0,0,459,457,1,0,0,0,459,458,1,0,0,0,460,461,1,0,0,0,461,462,
        5,39,0,0,462,59,1,0,0,0,463,464,5,39,0,0,464,465,3,76,35,0,465,61,
        1,0,0,0,466,471,5,39,0,0,467,470,3,44,19,0,468,470,8,7,0,0,469,467,
        1,0,0,0,469,468,1,0,0,0,470,473,1,0,0,0,471,469,1,0,0,0,471,472,
        1,0,0,0,472,474,1,0,0,0,473,471,1,0,0,0,474,475,5,39,0,0,475,63,
        1,0,0,0,476,481,5,34,0,0,477,480,3,44,19,0,478,480,8,8,0,0,479,477,
        1,0,0,0,479,478,1,0,0,0,480,483,1,0,0,0,481,479,1,0,0,0,481,482,
        1,0,0,0,482,484,1,0,0,0,483,481,1,0,0,0,484,485,5,34,0,0,485,65,
        1,0,0,0,486,491,5,39,0,0,487,490,3,44,19,0,488,490,8,7,0,0,489,487,
        1,0,0,0,489,488,1,0,0,0,490,493,1,0,0,0,491,489,1,0,0,0,491,492,
        1,0,0,0,492,67,1,0,0,0,493,491,1,0,0,0,494,499,5,34,0,0,495,498,
        3,44,19,0,496,498,8,8,0,0,497,495,1,0,0,0,497,496,1,0,0,0,498,501,
        1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,69,1,0,0,0,501,499,1,
        0,0,0,502,505,3,72,33,0,503,505,7,9,0,0,504,502,1,0,0,0,504,503,
        1,0,0,0,505,71,1,0,0,0,506,507,7,10,0,0,507,73,1,0,0,0,508,511,3,
        72,33,0,509,511,7,11,0,0,510,508,1,0,0,0,510,509,1,0,0,0,511,75,
        1,0,0,0,512,516,3,72,33,0,513,515,3,70,32,0,514,513,1,0,0,0,515,
        518,1,0,0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,77,1,0,0,0,518,516,
        1,0,0,0,519,523,3,72,33,0,520,522,3,74,34,0,521,520,1,0,0,0,522,
        525,1,0,0,0,523,521,1,0,0,0,523,524,1,0,0,0,524,79,1,0,0,0,525,523,
        1,0,0,0,526,527,3,38,16,0,527,528,1,0,0,0,528,529,6,37,4,0,529,81,
        1,0,0,0,530,531,3,40,17,0,531,532,1,0,0,0,532,533,6,38,5,0,533,83,
        1,0,0,0,534,535,3,36,15,0,535,536,1,0,0,0,536,537,6,39,6,0,537,538,
        6,39,2,0,538,85,1,0,0,0,539,540,3,42,18,0,540,541,1,0,0,0,541,542,
        6,40,7,0,542,543,6,40,2,0,543,87,1,0,0,0,544,545,3,50,22,0,545,89,
        1,0,0,0,546,549,3,62,28,0,547,549,3,64,29,0,548,546,1,0,0,0,548,
        547,1,0,0,0,549,91,1,0,0,0,550,553,3,66,30,0,551,553,3,68,31,0,552,
        550,1,0,0,0,552,551,1,0,0,0,553,93,1,0,0,0,554,555,5,123,0,0,555,
        556,1,0,0,0,556,557,6,44,8,0,557,95,1,0,0,0,558,559,5,37,0,0,559,
        560,5,63,0,0,560,561,5,123,0,0,561,562,1,0,0,0,562,563,6,45,8,0,
        563,97,1,0,0,0,564,565,5,60,0,0,565,566,1,0,0,0,566,567,6,46,9,0,
        567,99,1,0,0,0,568,569,5,37,0,0,569,570,5,101,0,0,570,571,5,109,
        0,0,571,572,5,112,0,0,572,573,5,116,0,0,573,574,5,121,0,0,574,101,
        1,0,0,0,575,576,5,37,0,0,576,577,5,112,0,0,577,578,5,114,0,0,578,
        579,5,101,0,0,579,580,5,99,0,0,580,103,1,0,0,0,581,582,5,37,0,0,
        582,583,5,100,0,0,583,584,5,112,0,0,584,585,5,114,0,0,585,586,5,
        101,0,0,586,587,5,99,0,0,587,105,1,0,0,0,588,589,5,37,0,0,589,590,
        5,109,0,0,590,591,5,101,0,0,591,592,5,114,0,0,592,593,5,103,0,0,
        593,594,5,101,0,0,594,107,1,0,0,0,595,596,5,37,0,0,596,597,5,101,
        0,0,597,598,5,120,0,0,598,599,5,112,0,0,599,600,5,101,0,0,600,601,
        5,99,0,0,601,602,5,116,0,0,602,109,1,0,0,0,603,604,5,37,0,0,604,
        605,5,101,0,0,605,606,5,120,0,0,606,607,5,112,0,0,607,608,5,101,
        0,0,608,609,5,99,0,0,609,610,5,116,0,0,610,611,5,45,0,0,611,612,
        5,114,0,0,612,613,5,114,0,0,613,111,1,0,0,0,614,615,5,58,0,0,615,
        113,1,0,0,0,616,617,5,59,0,0,617,115,1,0,0,0,618,619,5,91,0,0,619,
        117,1,0,0,0,620,621,5,93,0,0,621,119,1,0,0,0,622,623,5,124,0,0,623,
        121,1,0,0,0,624,625,5,45,0,0,625,626,5,62,0,0,626,627,1,0,0,0,627,
        628,6,58,10,0,628,123,1,0,0,0,629,630,3,76,35,0,630,125,1,0,0,0,
        631,632,5,37,0,0,632,633,5,37,0,0,633,637,1,0,0,0,634,636,9,0,0,
        0,635,634,1,0,0,0,636,639,1,0,0,0,637,638,1,0,0,0,637,635,1,0,0,
        0,638,640,1,0,0,0,639,637,1,0,0,0,640,641,6,60,3,0,641,127,1,0,0,
        0,642,644,3,30,12,0,643,642,1,0,0,0,644,645,1,0,0,0,645,643,1,0,
        0,0,645,646,1,0,0,0,646,647,1,0,0,0,647,648,6,61,3,0,648,129,1,0,
        0,0,649,650,9,0,0,0,650,651,1,0,0,0,651,652,6,62,11,0,652,653,6,
        62,2,0,653,131,1,0,0,0,654,655,5,123,0,0,655,656,1,0,0,0,656,657,
        6,63,3,0,657,658,6,63,8,0,658,133,1,0,0,0,659,660,5,92,0,0,660,661,
        9,0,0,0,661,662,1,0,0,0,662,663,6,64,3,0,663,135,1,0,0,0,664,665,
        3,64,29,0,665,666,1,0,0,0,666,667,6,65,3,0,667,137,1,0,0,0,668,669,
        4,66,0,0,669,670,3,58,26,0,670,671,1,0,0,0,671,672,6,66,3,0,672,
        139,1,0,0,0,673,674,4,67,1,0,674,675,3,60,27,0,675,676,1,0,0,0,676,
        677,6,67,3,0,677,141,1,0,0,0,678,679,4,68,2,0,679,680,3,62,28,0,
        680,681,1,0,0,0,681,682,6,68,3,0,682,143,1,0,0,0,683,684,3,36,15,
        0,684,685,1,0,0,0,685,686,6,69,3,0,686,145,1,0,0,0,687,688,3,42,
        18,0,688,689,1,0,0,0,689,690,6,70,3,0,690,147,1,0,0,0,691,692,3,
        34,14,0,692,693,1,0,0,0,693,694,6,71,12,0,694,149,1,0,0,0,695,696,
        5,0,0,1,696,697,1,0,0,0,697,698,6,72,3,0,698,151,1,0,0,0,699,700,
        9,0,0,0,700,701,1,0,0,0,701,702,6,73,3,0,702,153,1,0,0,0,703,704,
        5,123,0,0,704,705,1,0,0,0,705,706,6,74,13,0,706,707,6,74,8,0,707,
        155,1,0,0,0,708,709,5,92,0,0,709,710,9,0,0,0,710,711,1,0,0,0,711,
        712,6,75,3,0,712,157,1,0,0,0,713,714,3,64,29,0,714,715,1,0,0,0,715,
        716,6,76,3,0,716,159,1,0,0,0,717,718,4,77,3,0,718,719,3,58,26,0,
        719,720,1,0,0,0,720,721,6,77,3,0,721,161,1,0,0,0,722,723,4,78,4,
        0,723,724,3,60,27,0,724,725,1,0,0,0,725,726,6,78,3,0,726,163,1,0,
        0,0,727,728,4,79,5,0,728,729,3,62,28,0,729,730,1,0,0,0,730,731,6,
        79,3,0,731,165,1,0,0,0,732,733,3,36,15,0,733,734,1,0,0,0,734,735,
        6,80,3,0,735,167,1,0,0,0,736,737,3,42,18,0,737,738,1,0,0,0,738,739,
        6,81,3,0,739,169,1,0,0,0,740,741,5,125,0,0,741,742,1,0,0,0,742,743,
        6,82,12,0,743,171,1,0,0,0,744,745,5,0,0,1,745,746,1,0,0,0,746,747,
        6,83,3,0,747,173,1,0,0,0,748,749,9,0,0,0,749,750,1,0,0,0,750,751,
        6,84,3,0,751,175,1,0,0,0,752,753,5,123,0,0,753,754,1,0,0,0,754,755,
        6,85,13,0,755,756,6,85,8,0,756,177,1,0,0,0,757,758,5,92,0,0,758,
        759,9,0,0,0,759,760,1,0,0,0,760,761,6,86,3,0,761,179,1,0,0,0,762,
        763,3,64,29,0,763,764,1,0,0,0,764,765,6,87,3,0,765,181,1,0,0,0,766,
        767,4,88,6,0,767,768,3,58,26,0,768,769,1,0,0,0,769,770,6,88,3,0,
        770,183,1,0,0,0,771,772,4,89,7,0,772,773,3,60,27,0,773,774,1,0,0,
        0,774,775,6,89,3,0,775,185,1,0,0,0,776,777,4,90,8,0,777,778,3,62,
        28,0,778,779,1,0,0,0,779,780,6,90,3,0,780,187,1,0,0,0,781,782,3,
        36,15,0,782,783,1,0,0,0,783,784,6,91,3,0,784,189,1,0,0,0,785,786,
        3,42,18,0,786,787,1,0,0,0,787,788,6,92,3,0,788,191,1,0,0,0,789,790,
        5,62,0,0,790,791,1,0,0,0,791,792,6,93,12,0,792,193,1,0,0,0,793,794,
        5,0,0,1,794,795,1,0,0,0,795,796,6,94,3,0,796,195,1,0,0,0,797,798,
        9,0,0,0,798,799,1,0,0,0,799,800,6,95,3,0,800,197,1,0,0,0,801,802,
        5,123,0,0,802,803,1,0,0,0,803,804,6,96,13,0,804,805,6,96,8,0,805,
        199,1,0,0,0,806,807,5,92,0,0,807,808,9,0,0,0,808,809,1,0,0,0,809,
        810,6,97,3,0,810,201,1,0,0,0,811,812,3,64,29,0,812,813,1,0,0,0,813,
        814,6,98,3,0,814,203,1,0,0,0,815,816,4,99,9,0,816,817,3,58,26,0,
        817,818,1,0,0,0,818,819,6,99,3,0,819,205,1,0,0,0,820,821,4,100,10,
        0,821,822,3,60,27,0,822,823,1,0,0,0,823,824,6,100,3,0,824,207,1,
        0,0,0,825,826,4,101,11,0,826,827,3,62,28,0,827,828,1,0,0,0,828,829,
        6,101,3,0,829,209,1,0,0,0,830,831,3,36,15,0,831,832,1,0,0,0,832,
        833,6,102,3,0,833,211,1,0,0,0,834,835,3,42,18,0,835,836,1,0,0,0,
        836,837,6,103,3,0,837,213,1,0,0,0,838,839,5,58,0,0,839,840,1,0,0,
        0,840,841,6,104,14,0,841,842,6,104,12,0,842,215,1,0,0,0,843,844,
        5,0,0,1,844,845,1,0,0,0,845,846,6,105,3,0,846,217,1,0,0,0,847,848,
        9,0,0,0,848,849,1,0,0,0,849,850,6,106,3,0,850,219,1,0,0,0,47,0,1,
        2,3,4,5,231,281,294,301,306,310,332,342,354,360,369,375,384,387,
        396,405,413,423,425,427,429,436,439,454,459,469,471,479,481,489,
        491,497,499,504,510,516,523,548,552,637,645,15,2,1,0,5,2,0,0,1,0,
        6,0,0,7,7,0,7,8,0,7,9,0,7,10,0,5,3,0,5,4,0,5,5,0,7,12,0,4,0,0,7,
        16,0,7,25,0
    ]

class BisonLexer(BisonLexerBase):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Main = 1
    PrequelOption = 2
    Action = 3
    Tag = 4
    ReturnType = 5

    BEGIN_RULES = 1
    PROLOGUE = 2
    PREQUEL_TOKEN_OPTION = 3
    PREQUEL_TOKEN = 4
    UNTERMINATED_PREQUEL_TOKEN = 5
    BEGIN_PREQUEL_OPTION = 6
    DOC_COMMENT = 7
    HEADER = 8
    BLOCK_COMMENT = 9
    LINE_COMMENT = 10
    WS = 11
    ERRCHAR = 12
    INT = 13
    STRING_LITERAL = 14
    UNTERMINATED_STRING_LITERAL = 15
    BEGIN_ACTION = 16
    BEGIN_PREDICATE = 17
    BEGIN_TAG = 18
    EMPTY = 19
    PREC = 20
    DPREC = 21
    MERGE = 22
    EXPECT = 23
    EXPECT_RR = 24
    COLON = 25
    SEMI = 26
    LBRACK = 27
    RBRACK = 28
    OR = 29
    RETURN = 30
    ID = 31
    EPILOGUE = 32
    MAIN_WS = 33
    PREQUEL_OPTION_NESTED_ACTION = 34
    PREQUEL_OPTION_ESCAPE = 35
    PREQUEL_OPTION_STRING_LITERAL = 36
    PREQUEL_OPTION_CHAR_LITERAL = 37
    PREQUEL_OPTION_LIFETIME_LITERAL = 38
    PREQUEL_OPTION_S_STRING_LITERAL = 39
    PREQUEL_OPTION_BLOCK_COMMENT = 40
    PREQUEL_OPTION_LINE_COMMENT = 41
    END_PREQUEL_OPTION = 42
    UNTERMINATED_PREQUEL_OPTION = 43
    PREQUEL_OPTION_CONTENT = 44
    ACTION_ESCAPE = 45
    ACTION_STRING_LITERAL = 46
    ACTION_CHAR_LITERAL = 47
    ACTION_LIFETIME_LITERAL = 48
    ACTION_S_STRING_LITERAL = 49
    ACTION_BLOCK_COMMENT = 50
    ACTION_LINE_COMMENT = 51
    END_ACTION = 52
    UNTERMINATED_ACTION = 53
    ACTION_CONTENT = 54
    TAG_ESCAPE = 55
    TAG_STRING_LITERAL = 56
    TAG_CHAR_LITERAL = 57
    TAG_LIFETIME_LITERAL = 58
    TAG_S_STRING_LITERAL = 59
    TAG_BLOCK_COMMENT = 60
    TAG_LINE_COMMENT = 61
    END_TAG = 62
    UNTERMINATED_TAG = 63
    TAG_CONTENT = 64
    RETURN_TYPE_ESCAPE = 65
    RETURN_TYPE_STRING_LITERAL = 66
    RETURN_TYPE_CHAR_LITERAL = 67
    RETURN_TYPE_LIFETIME_LITERAL = 68
    RETURN_TYPE_S_STRING_LITERAL = 69
    RETURN_TYPE_BLOCK_COMMENT = 70
    RETURN_TYPE_LINE_COMMENT = 71
    UNTERMINATED_RETURN_TYPE = 72
    RETURN_TYPE_CONTENT = 73

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "Main", "PrequelOption", "Action", "Tag", 
                  "ReturnType" ]

    literalNames = [ "<INVALID>",
            "'%%'", "'%?{'", "'<'", "'%empty'", "'%prec'", "'%dprec'", "'%merge'", 
            "'%expect'", "'%expect-rr'", "';'", "'['", "']'", "'|'", "'->'", 
            "'}'", "'>'" ]

    symbolicNames = [ "<INVALID>",
            "BEGIN_RULES", "PROLOGUE", "PREQUEL_TOKEN_OPTION", "PREQUEL_TOKEN", 
            "UNTERMINATED_PREQUEL_TOKEN", "BEGIN_PREQUEL_OPTION", "DOC_COMMENT", 
            "HEADER", "BLOCK_COMMENT", "LINE_COMMENT", "WS", "ERRCHAR", 
            "INT", "STRING_LITERAL", "UNTERMINATED_STRING_LITERAL", "BEGIN_ACTION", 
            "BEGIN_PREDICATE", "BEGIN_TAG", "EMPTY", "PREC", "DPREC", "MERGE", 
            "EXPECT", "EXPECT_RR", "COLON", "SEMI", "LBRACK", "RBRACK", 
            "OR", "RETURN", "ID", "EPILOGUE", "MAIN_WS", "PREQUEL_OPTION_NESTED_ACTION", 
            "PREQUEL_OPTION_ESCAPE", "PREQUEL_OPTION_STRING_LITERAL", "PREQUEL_OPTION_CHAR_LITERAL", 
            "PREQUEL_OPTION_LIFETIME_LITERAL", "PREQUEL_OPTION_S_STRING_LITERAL", 
            "PREQUEL_OPTION_BLOCK_COMMENT", "PREQUEL_OPTION_LINE_COMMENT", 
            "END_PREQUEL_OPTION", "UNTERMINATED_PREQUEL_OPTION", "PREQUEL_OPTION_CONTENT", 
            "ACTION_ESCAPE", "ACTION_STRING_LITERAL", "ACTION_CHAR_LITERAL", 
            "ACTION_LIFETIME_LITERAL", "ACTION_S_STRING_LITERAL", "ACTION_BLOCK_COMMENT", 
            "ACTION_LINE_COMMENT", "END_ACTION", "UNTERMINATED_ACTION", 
            "ACTION_CONTENT", "TAG_ESCAPE", "TAG_STRING_LITERAL", "TAG_CHAR_LITERAL", 
            "TAG_LIFETIME_LITERAL", "TAG_S_STRING_LITERAL", "TAG_BLOCK_COMMENT", 
            "TAG_LINE_COMMENT", "END_TAG", "UNTERMINATED_TAG", "TAG_CONTENT", 
            "RETURN_TYPE_ESCAPE", "RETURN_TYPE_STRING_LITERAL", "RETURN_TYPE_CHAR_LITERAL", 
            "RETURN_TYPE_LIFETIME_LITERAL", "RETURN_TYPE_S_STRING_LITERAL", 
            "RETURN_TYPE_BLOCK_COMMENT", "RETURN_TYPE_LINE_COMMENT", "UNTERMINATED_RETURN_TYPE", 
            "RETURN_TYPE_CONTENT" ]

    ruleNames = [ "BEGIN_RULES", "PROLOGUE", "PREQUEL_TOKEN_OPTION", "PREQUEL_TOKEN", 
                  "UNTERMINATED_PREQUEL_TOKEN", "BEGIN_PREQUEL_OPTION", 
                  "DOC_COMMENT", "HEADER", "BLOCK_COMMENT", "LINE_COMMENT", 
                  "WS", "ERRCHAR", "Ws", "Hws", "Vws", "BlockComment", "DocComment", 
                  "HeaderComment", "LineComment", "EscSeq", "EscAny", "UnicodeEsc", 
                  "DecimalNumeral", "HexDigit", "DecDigit", "BoolLiteral", 
                  "CharLiteral", "LifetimeLiteral", "SQuoteLiteral", "DQuoteLiteral", 
                  "USQuoteLiteral", "UDQuoteLiteral", "NameChar", "NameStartChar", 
                  "NameCharDash", "Id", "IdDash", "MAIN_DOC_COMMENT", "MAIN_HEADER", 
                  "MAIN_BLOCK_COMMENT", "MAIN_LINE_COMMENT", "INT", "STRING_LITERAL", 
                  "UNTERMINATED_STRING_LITERAL", "BEGIN_ACTION", "BEGIN_PREDICATE", 
                  "BEGIN_TAG", "EMPTY", "PREC", "DPREC", "MERGE", "EXPECT", 
                  "EXPECT_RR", "COLON", "SEMI", "LBRACK", "RBRACK", "OR", 
                  "RETURN", "ID", "EPILOGUE", "MAIN_WS", "MAIN_ERRCHAR", 
                  "PREQUEL_OPTION_NESTED_ACTION", "PREQUEL_OPTION_ESCAPE", 
                  "PREQUEL_OPTION_STRING_LITERAL", "PREQUEL_OPTION_CHAR_LITERAL", 
                  "PREQUEL_OPTION_LIFETIME_LITERAL", "PREQUEL_OPTION_S_STRING_LITERAL", 
                  "PREQUEL_OPTION_BLOCK_COMMENT", "PREQUEL_OPTION_LINE_COMMENT", 
                  "END_PREQUEL_OPTION", "UNTERMINATED_PREQUEL_OPTION", "PREQUEL_OPTION_CONTENT", 
                  "NESTED_ACTION", "ACTION_ESCAPE", "ACTION_STRING_LITERAL", 
                  "ACTION_CHAR_LITERAL", "ACTION_LIFETIME_LITERAL", "ACTION_S_STRING_LITERAL", 
                  "ACTION_BLOCK_COMMENT", "ACTION_LINE_COMMENT", "END_ACTION", 
                  "UNTERMINATED_ACTION", "ACTION_CONTENT", "TAG_NESTED_ACTION", 
                  "TAG_ESCAPE", "TAG_STRING_LITERAL", "TAG_CHAR_LITERAL", 
                  "TAG_LIFETIME_LITERAL", "TAG_S_STRING_LITERAL", "TAG_BLOCK_COMMENT", 
                  "TAG_LINE_COMMENT", "END_TAG", "UNTERMINATED_TAG", "TAG_CONTENT", 
                  "RETURN_TYPE_NESTED_ACTION", "RETURN_TYPE_ESCAPE", "RETURN_TYPE_STRING_LITERAL", 
                  "RETURN_TYPE_CHAR_LITERAL", "RETURN_TYPE_LIFETIME_LITERAL", 
                  "RETURN_TYPE_S_STRING_LITERAL", "RETURN_TYPE_BLOCK_COMMENT", 
                  "RETURN_TYPE_LINE_COMMENT", "END_RETURN_TYPE", "UNTERMINATED_RETURN_TYPE", 
                  "RETURN_TYPE_CONTENT" ]

    grammarFileName = "BisonLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates is None:
            preds = dict()
            preds[66] = self.PREQUEL_OPTION_CHAR_LITERAL_sempred
            preds[67] = self.PREQUEL_OPTION_LIFETIME_LITERAL_sempred
            preds[68] = self.PREQUEL_OPTION_S_STRING_LITERAL_sempred
            preds[77] = self.ACTION_CHAR_LITERAL_sempred
            preds[78] = self.ACTION_LIFETIME_LITERAL_sempred
            preds[79] = self.ACTION_S_STRING_LITERAL_sempred
            preds[88] = self.TAG_CHAR_LITERAL_sempred
            preds[89] = self.TAG_LIFETIME_LITERAL_sempred
            preds[90] = self.TAG_S_STRING_LITERAL_sempred
            preds[99] = self.RETURN_TYPE_CHAR_LITERAL_sempred
            preds[100] = self.RETURN_TYPE_LIFETIME_LITERAL_sempred
            preds[101] = self.RETURN_TYPE_S_STRING_LITERAL_sempred
            self._predicates = preds
        pred = self._predicates.get(ruleIndex, None)
        if pred is not None:
            return pred(localctx, predIndex)
        else:
            raise Exception("No registered predicate for:" + str(ruleIndex))

    def PREQUEL_OPTION_CHAR_LITERAL_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 0:
                return  self.isLikeC() 
         

    def PREQUEL_OPTION_LIFETIME_LITERAL_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 1:
                return  self.isLikeC() 
         

    def PREQUEL_OPTION_S_STRING_LITERAL_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 2:
                return  self.isLikePy() 
         

    def ACTION_CHAR_LITERAL_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 3:
                return  self.isLikeC() 
         

    def ACTION_LIFETIME_LITERAL_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 4:
                return  self.isLikeC() 
         

    def ACTION_S_STRING_LITERAL_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 5:
                return  self.isLikePy() 
         

    def TAG_CHAR_LITERAL_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 6:
                return  self.isLikeC() 
         

    def TAG_LIFETIME_LITERAL_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 7:
                return  self.isLikeC() 
         

    def TAG_S_STRING_LITERAL_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 8:
                return  self.isLikePy() 
         

    def RETURN_TYPE_CHAR_LITERAL_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 9:
                return  self.isLikeC() 
         

    def RETURN_TYPE_LIFETIME_LITERAL_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 10:
                return  self.isLikeC() 
         

    def RETURN_TYPE_S_STRING_LITERAL_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 11:
                return  self.isLikePy() 
         


